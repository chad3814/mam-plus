{
	// Place your mam-plus workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
    // }
    "New Feature: Checkbox": {
        "prefix": ["mp-check"],
        "body": [
           "class ${1:YourFeatureName} implements Feature {",
           "    private _settings: CheckboxSetting = {",
           "        type: 'checkbox',",
           "        title: '${2:yourFeatureName}',",
           "        scope: SettingGroup.$3,",
           "        desc: '$4',",
           "    }",
           "    // An element that must exist in order for the feature to run",
           "    private _tar: string = '${5:body}';",
           "    // The code that runs when the feature is created on `features.ts`.",
           "    constructor() {",
           "        // Add 1+ valid page type. Exclude for global",
           "        Util.startFeature( this._settings, this._tar, [$6] )",
           "            .then( t => { if (t) { this._init()}",
           "        } );",
           "    }",
           "    private async _init() {",
           "        ${0:// This is where your feature starts}",
           "    }",
           "    get settings(): CheckboxSetting {",
           "        return this._settings;",
           "    }",
           "}",
        ],
        "description": "Create a new Checkbox feature."
    },
    "New Feature: Textbox": {
        "prefix": [
            "mp-text"
        ],
        "body": [
            "class ${1:YourFeatureName} implements Feature {",
            "    private _settings: TextboxSetting = {",
            "        type: 'textbox',",
            "        title: '${2:yourFeatureName}',",
            "        scope: SettingGroup.$3,",
            "        tag: '${4:Your Feature}',",
            "        placeholder: '${5:ex. Example}',",
            "        desc: '$6',",
            "    }",
            "    // An element that must exist in order for the feature to run",
            "    private _tar: string = '${7:body}';",
            "    // The code that runs when the feature is created on `features.ts`.",
            "    constructor() {",
            "        // Add 1+ valid page type. Exclude for global",
            "        Util.startFeature( this._settings, this._tar, [$8] )",
            "            .then( t => { if (t) { this._init()}",
            "        } );",
            "    }",
            "    private async _init() {",
            "        ${0:// This is where your feature starts}",
            "    }",
            "    get settings(): TextboxSetting {",
            "        return this._settings;",
            "    }",
            "}",
        ],
        "description": "Create a new Checkbox feature."
    },
    "New Feature: Dropdown": {
        "prefix": [
            "mp-drop"
        ],
        "body": [
            "class ${1:YourFeatureName} implements Feature {",
            "    private _settings: DropdownSetting = {",
            "        type: 'dropdown',",
            "        title: '${2:yourFeatureName}',",
            "        scope: SettingGroup.$3,",
            "        tag: '${4:Your Feature}',",
            "        options: {",
            "            default: '${5:Default text}',",
            "            ${6:/* Add your options here */}",
            "        },",
            "        desc: '$7',",
            "    }",
            "    // An element that must exist in order for the feature to run",
            "    private _tar: string = '${8:body}';",
            "    // The code that runs when the feature is created on `features.ts`.",
            "    constructor() {",
            "        // Add 1+ valid page type. Exclude for global",
            "        Util.startFeature( this._settings, this._tar, [$9] )",
            "            .then( t => { if (t) { this._init()}",
            "        } );",
            "    }",
            "    // This is where your feature starts",
            "    private async _init() {",
            "        const selected:string = GM_getValue(this._settings.title);",
            "        if('${10:Option1}' === selected){",
            "            // First option code",
            "        }else if('${11:Option2}' === selected){",
            "            // Second option code",
            "        }${0:/* Add more options if needed */}",
            "    }",
            "    get settings(): DropdownSetting {",
            "        return this._settings;",
            "    }",
            "}",
        ],
        "description": "Create a new Checkbox feature."
    },
}
